Instructions : 

Implement the append method for the LinkedList class.

The append method should add a new node with a given value to the end of the linked list, updating the tail attribute and the length attribute accordingly.



Keep in mind the following requirements:



The method should handle the cases where the list is empty and where the list already has one or more nodes.

The method should create a new node with the given value and add it to the end of the list.

The method should update the tail attribute of the LinkedList correctly.

The method should update the length attribute of the LinkedList to reflect the addition of the new node.

SOLUTION : 

 def append(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node
        self.length += 1

SOLUTION EXPLANATION : 

Create a new node with the given value:

    new_node = Node(value)

Check if the linked list is empty:

    if self.head is None:

You could also do it this way:

    if self.lenghth == 0:


Either of the lines above will test to see if the LL is empty:

If the LL is empty, set the head and tail to point at new_node:

    self.head = new_node

    self.tail = new_node   

The lines above will point both head and tail at the new_node:

If the LL has nodes it might look something like the image below.  Both self.tail.next and self.tail need to point to new_node:

First, we will update the next attribute of the node tail is pointing to, to point to new_node:

    self.tail.next = new_node

Then we will set tail to point to new_node:

    self.tail = new_node

Increment the length of the linked list by 1:

    self.length += 1

Big O:

O( 1 )

Constant Time

No matter how large the linked list is, the number of operations taken to execute append remains constant

Constant time is another name for O( 1 )


Code with inline comments:



def append(self, value):
    # Create a new node with the given value
    new_node = Node(value)
 
    # Check to see if the linked list is empty
    if self.head is None:
        # Point both head and tail at the new node
        self.head = new_node
        self.tail = new_node
    else:
        # Point the next pointer of the last node at the new node
        self.tail.next = new_node
        # Point tail at the new node
        self.tail = new_node
 
    # Increment the length of the linked list
    self.length += 1
