INSTRUCTIONS : 

Implement the prepend method for the LinkedList class.

The prepend method should add a new node with a given value to the beginning of the linked list, updating the head attribute and the length attribute accordingly.

Keep in mind the following requirements:



The method should handle the cases where the list is empty and where the list already has one or more nodes.

The method should create a new node with the given value and add it to the beginning of the list.

The method should update the head attribute of the LinkedList correctly.

The method should update the length attribute of the LinkedList to reflect the addition of the new node.

The method should return True if the operation is successful.

SOLUTION : 

    def prepend(self, value):
        new_node = Node(value)
        if self.length == 0:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head = new_node
        self.length += 1
        return True 

SOLUTION EXPLANATION : 

This code defines a prepend method for a LinkedList class. The purpose of this method is to add a new node with the given value to the beginning of the linked list, updating the head attribute and the length attribute accordingly. Here is an explanation of each part of the code:



def prepend(self, value):: This line defines the prepend method, which takes a value as its argument.

new_node = Node(value): This line creates a new instance of the Node class with the given value, representing the new node that will be added to the beginning of the list.

if self.length == 0:: This condition checks if the linked list is empty (length is 0).

self.head = new_node and self.tail = new_node: If the list is empty, these lines set both the head and tail attributes of the LinkedList instance to the new node, since it will be the only node in the list.

else:: This block executes if the list is not empty (length is greater than 0).

new_node.next = self.head: This line sets the next attribute of the new node to the current head of the list. This creates a link between the new node and the previous first node in the list.

self.head = new_node: This line updates the head attribute of the LinkedList instance to the new node, making the new node the new head of the list.

self.length += 1: This line increments the length attribute of the LinkedList instance by 1, reflecting the addition of the new node.

return True: This line returns True, indicating that the operation was successful.



Big O:

O( 1 )

Constant Time

No matter how large the linked list is, the number of operations taken to execute prepend remains constant

Constant time is another name for O( 1 )




Code with inline comments:



    # Define the prepend method for the LinkedList class
    def prepend(self, value):
        # Create a new Node with the given value
        new_node = Node(value)
        
        # Check if the linked list is empty
        if self.length == 0:
            # Set the head and tail attributes to the new node
            self.head = new_node
            self.tail = new_node
        else:
            # Set the next attribute of the new node to the current head
            new_node.next = self.head
            # Update the head attribute to the new node
            self.head = new_node
            
        # Increment the length attribute of the LinkedList
        self.length += 1
        
        # Return True to indicate a successful operation
        return True 
        
